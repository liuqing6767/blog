<!--
author: 刘青
date: 2016-03-30
title: 设计模式讲在前面
tags: 设计模式
category: fundation/design_patterns
status: publish
summary:  
-->


# 基本的设计原则
设计模式其实有无数个，而不是23个。但是它们的源于七个基本的设计原则。
1. Single Responsibility Principle：不要存在多于一个的导致类变更的原因
    - 变更是必然的，但是改动应该尽可能少的地方，降低对其他组件的影响（高内聚低耦合）
2. Open/Close Principle：软件实体（如模块、组件、类、方法等）应该是可扩展（对扩展开放）而不可修改（对修改关闭）
    - 通过扩展软件实体来应对变化，满足新需求，而不是修改旧的代码
3. Liskov Substitution Principle：子类对象能够替换程序中任何地方出现的父类对象
    - 就是子类对象不要覆写父类的方法，保持子类和父类的行为一致，降低维护成本
4. Interface Segregation Principle：客户端不应该依赖它不需要的接口
    - 接口要尽可能小
5. Dependency Inversion：高层模块不应该依赖低层模块，两者都应该依赖抽象；抽象不应该依赖具体实现，具体实现应该依赖抽象
    - 细节是多变的，而抽象梗稳定。当细节变化发生时，调用方应该尽可能不要动
6. The Least Knowledge Principle（The Law of Demeter）：一个对象应该对其他对象保持最小的了解
    - 调用方应该尽可能小范围的去访问被调用方的成员，以减少依赖
7. Composite/Aggregation Reuse Principle：尽量使用组合/聚合 而不是 继承来达到复用目的
    - 继承更不好理解，也暴露了更多的细节

前面五个简称 SOLID，由 Martin在论文《设计原则和设计模式》中提出来的。后面两个是其他人提的。
3和7是从可维护的角度考虑，其他则是从变更发生时尽可能减少修改的角度考虑。


# 设计模式概述
什么是设计模式：每个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样就能一次又一次的使用该方案而不必做重复劳动。

设计模式是面向对象软件设计的经验，使用UML描述。

设计模式的基本要素：
- 名字：标识；
- 问题：使用该模式的处境；
- 方案：描述模式的各个部分之间的职责和协助方式；
- 效果：模式应用的效果及使用模式应权衡的问题

模式的分类：有很多种分类类型。

按照目的分有：
- 创建型：和对象的创建有关；
- 结构型：处理类|对象间的关系；
- 行为型：描述对类|对象交互方式和和职责分配

按照范围有：
- 类：通过继承建立关系，静态的；
- 对象：处理对象的关系，动态的

我们说常用的设计模式有23个，分类如下：
|范围||目的||
|-|-|-|-|
| |创建型|结构型|行为型|
|类|Factory Method|Adapter(类)|Interpreter<br/>Template Method|
|对象|Abstract Factory<br/>Builder<br/>Prototype<br/>Singleton|Adapter(对象)<br/>Bridge<br/>Composite<br/>Decorator<br/>Facade<br/>Flyweight<br/>Proxy|Chain of Responsibility<br/>Command<br/>Iterator<br/>Mediator<br/>Memento<br/>Observers<br/>State<br/>Strategy<br/>Visitor|

## TODO pattern basic elements one by one